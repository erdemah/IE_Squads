<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="description" content="">
    <meta name="Garry" content="">
    <title>View you pay level</title>


    <link href="open-iconic/font/css/open-iconic-bootstrap.css" rel="stylesheet">
    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="css/index.css" rel="stylesheet">
    <link href="css/working_hour.css" rel="stylesheet">
    <link href="css/scroll.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Architects+Daughter&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Josefin+Sans:300,400" rel="stylesheet">
    <link href="css/scroll.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.1.0/css/flag-icon.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Architects+Daughter&display=swap" rel="stylesheet">
</head>
</html>

<body>
<%include header.ejs%>

<!--  TILES CODE-->
<div class="pagina">
    <div class="linha">
        <div class="tile epic1" onclick="location.href='superannuation'" style="cursor: pointer">
            <span class="titulo" style="align-content: center">Super and Tax</span>
        </div>
        <div class="tile epic1" onclick="location.href='minimum_wage'" style="cursor: pointer">
            <span class="titulo" style="align-content: center">Minimum Wage</span>
        </div>
        <div class="tile epic1"  onclick="location.href='working_hour'" style="cursor: pointer">
            <span class="titulo" style="align-content: center">Working Hours</span>
        </div>
        <div class="tile epic1"  onclick="location.href='annual_bonus'" style="cursor: pointer">
            <span class="titulo" style="align-content: center">Annual Bonus</span>
        </div>
        <div class="tile epic2"  onclick="location.href='annual_leave'" style="cursor: pointer">
            <span class="titulo" style="align-content: center">Annual Leave</span>
        </div>
        <div class="tile epic1"  onclick="location.href='pay_raise_visu'" style="cursor: pointer">
            <span class="titulo" style="align-content: center">Pay Raise</span>
        </div>
        <div class="tile epic2"  onclick="location.href='pay_rate_level'" style="cursor: pointer">
            <span class="titulo" style="align-content: center">Pay Level</span>
        </div>
        <div class="tile epic1"  onclick="location.href='pay_slip'" style="cursor: pointer">
            <span class="titulo" style="align-content: center">Pay Slips</span>
        </div>
        <div class="tile epic2"  onclick="location.href='sick_leave'" style="cursor: pointer">
            <span class="titulo" style="align-content: center">Sick Leave</span>
        </div>
    </div>
</div>
<!-- TILES CODE END-->
<h1 style="text-align: center">How much we will be paid after leaving a company?</h1>
<p class="text1" style="text-align: center">Pay leave depends on 2 main factors:
    <br> <span style="text-align: center">1.Which field we worked in?</span><br>
    <span style="text-align: center">2.Did the contract have leave entitlement?</span><br>
    <span style="text-align: center">we can find some specific information from the below chat.</span>
</p>

<!-- Visualisation code-->
<style>

    body {
        font-family: 'Architects Daughter','cursive';
    }
    .text1{
        font-size: 1.2em;
    }
    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .x.axis path {
        display: none;
    }

</style>
</body>

<body>

<script src="https://d3js.org/d3.v3.min.js"></script>
<script>

    var width = 960,
        height = 700,
        barHeight = height / 2 - 40;

    var formatNumber = d3.format("s");

    var color = d3.scale.ordinal()
        .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

    var svg = d3.select('body').append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + width/2 + "," + height/2 + ")");

    d3.json("images/leave.json", function(error, data) {

        var statesNames = data.map(function(d) { return d.status; });
        var ageNames = data[0].profession.map(function(d) { return d.name; });

        var barScale = d3.scale.linear()
            .domain([0, d3.max(data, function(d) { return d3.max(d.profession, function(d) { return d.value; }); })])
            .range([0, barHeight]);

        var numBarsStates = statesNames.length ;
        var numBarsAges = ageNames.length ;

        var x = d3.scale.linear()
            .domain([0, d3.max(data, function(d) { return d3.max(d.profession, function(d) { return d.value; }); })])
            .range([0, -barHeight]);

        var xAxis = d3.svg.axis()
            .scale(x).orient("left")
            .ticks(5)
            .tickFormat(formatNumber);

        var circles = svg.selectAll("circle")
            .data(x.ticks(5))
            .enter().append("circle")
            .attr("r", function(d) {return barScale(d);})
            .style("fill", "none")
            .style("stroke", "black")
            .style("stroke-dasharray", "2,2")
            .style("stroke-width",".5px");

        var states = svg.selectAll(".state")
            .data(data)
            .enter().append("g")
            .attr("class", "state")
            .attr("transform", function(d,i) { return "rotate(" + (i * 360 / numBarsStates) + ")"; });

        var arc = d3.svg.arc()
            .startAngle(function(d,i) { return (i * 2 * Math.PI) / (numBarsAges*numBarsStates); })
            .endAngle(function(d,i) { return ((i + 1) * 2 * Math.PI) / (numBarsAges*numBarsStates); })
            .innerRadius(0);

        var segments = states.selectAll("path")
            .data(function(d) { return d.profession; })
            .enter().append("path")
            .each(function(d) { d.outerRadius = 0; })
            .style("fill", function (d) { return color(d.name); })
            .attr("d", arc)
            .on("mouseover",function(){
                d3.select(this).style("stroke","rgb(0,0,255)")
                    .style("stroke-width","2");
            })
            .on("mouseout",function(){
                d3.select(this).style("stroke","none")
                    .style("stroke-width","0");
            });

        segments.transition().ease("elastic").duration(1200).delay(function(d,i,u) { return u * 200 + 400;})
            .attrTween("d", function(d,index) {
                var i = d3.interpolate(d.outerRadius, barScale(d.value));
                return function(t) { d.outerRadius = i(t); return arc(d,index); };
            });

        svg.append("circle")
            .attr("r", barHeight)
            .classed("outer", true)
            .style("fill", "none")
            .style("stroke", "black")
            .style("stroke-width","1.5px");

        states.selectAll("line")
            .data(function(d) { return d.profession; })
            .enter().append("line")
            .attr("y2", function(d,i) { return i===0 ? -barHeight - 20 : -barHeight; })
            .style("stroke", "black")
            .style("stroke-width", function(d,i) { return i===0 ? "1px" : "0.2px"; })
            .attr("transform", function(d, i) { return "rotate(" + (i * 360 / (numBarsAges*numBarsStates)) + ")"; });

        svg.append("g")
            .attr("class", "x axis")
            .call(xAxis);

        // Labels
        var labelRadius = barHeight * 1.025;

        var labels = svg.append("g")
            .classed("labels", true);

        labels.append("def")
            .append("path")
            .attr("id", "label-path")
            .attr("d", "m0 " + -labelRadius + " a" + labelRadius + " " + labelRadius + " 0 1,1 -0.01 0");

        labels.selectAll("text")
            .data(statesNames)
            .enter().append("text")
            .style("text-anchor", "middle")
            .style("font-weight","bold")
            .style("fill", function(d, i) {return "#3e3e3e";})
            .append("textPath")
            .attr("xlink:href", "#label-path")
            .attr("startOffset", function(d, i) {return i * 100 / numBarsStates + 50 / numBarsStates + '%';})
            .text(function(d) {
                return d.toUpperCase();
            });

        // legend
        var legend = svg.selectAll(".legend")
            .data(ageNames.slice().reverse())
            .enter().append("g")
            .attr("class", "legend")
            .attr("transform", function(d, i) { return "translate("+ -width/2 + "," + (-(height/2 - 20) + (i * 20)) + ")"; });

        legend.append("rect")
            .attr("x", width - 33)
            .attr("width", 18)
            .attr("height", 18)
            .style("fill", color);

        legend.append("text")
            .attr("x", width - 39)
            .attr("y", 9)
            .attr("dy", ".35em")
            .style("text-anchor", "end")
            .attr("font-size","0.75em")
            .text(function(d) { return d; });

    });

    d3.select(self.frameElement).style("height", height + "px");

</script>
<!-- Visualisation code end-->
<%include footer.ejs %>

</body>